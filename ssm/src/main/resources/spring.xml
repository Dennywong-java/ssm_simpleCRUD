<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--扫描组件（通过注解排除控制层，因为控制层已经在SpringMVC里进行扫描了）-->
    <context:component-scan base-package="com.atguigu.ssm">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入properties-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--
        开启事务的注解驱动
        将使用注解@Transactional的方法进行事务管理
    -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--配置SqlSessionFactoryBean，可以直接在Spring的IOC中直接获取SqlSessionFactory-->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!--设置Mybatis的核心配置文件的路径-->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    <!--设置数据源-->
    <property name="dataSource" ref="dataSource"/>
    <!--设置别名包-->
    <property name="typeAliasesPackage" value="com.atguigu.ssm.pojo"/>
    <!--设置映射文件，只有映射文件的包和mapper接口的包不一致时才需要设置-->
<!--    <property name="mapperLocations" value="classpath:mappers/*.xml"/> -->
    <!--plugins-->
<!--    <property name="plugins">-->
<!--        <array>-->
<!--            &lt;!&ndash;配置分页插件&ndash;&gt;-->
<!--            <bean class="com.github.pagehelper.PageInterceptor"></bean>-->
<!--        </array>-->
<!--    </property>-->
</bean>

<!--配置MapperScannerConfigurer，可以直接在Spring的IOC中直接获取Mapper接口的代理对象-->
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.atguigu.ssm.mapper"/>
</bean>
</beans>